/*****************/

/**
* @tags: 	url path for background mixins
* @usage: 	choose 3 different path. null by default, true = ../../../../charcoal/modules/admin/assets/images/, module = get-asset-images?a=
* 			can be define into stylesheet or specefic class
*/

$core: null !default;

/*****************/

/**
* @file _core-functions.scss
*
* @author Nicolas Poliquin <nicolas@polikin.ca>
* @version @Mon Jul  8 15:40:21 EDT 2013
* @license (c) Polikin.ca 2013
*/


/*****************/

/*  =========
  MIXIN
=========
*/

/**
* @tags: media queries
* @mixin: @include media-query(value) { attribut }
* @usage:
* .selector @include media-query(320px) { width: 60%; }; }
*/

@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
	@media #{$query} and (#{$operator}: #{$value}px) {
		@content;
	}
}

@mixin media-query-max($value, $operator: 'max-width', $query: 'screen') {
	@media #{$query} and (#{$operator}: #{$value}px) {
		@content;
	}
}

@mixin media-query-minmax($value-min, $value-max, $operator: 'min-width', $operator2: 'max-width', $query: 'screen') {
	@media #{$query} and (#{$operator}: #{$value-min}px) and (#{$operator2}: #{$value-max}px) {
		@content;
	}
}


/**
* @tags: position
* @mixin: @include position();
* @usage:
* .selector { @include position(absolute, 0, 0, 0, 0); }
*/

@mixin position ($type, $top, $right, $bottom, $left) {
	position: 	$type;
    top: 		$top;
    right: 		$right;
    bottom: 	$bottom;
    left: 		$left;
}


/**
* @tags: custom size
* @mixin: @include size();
* @usage:
* .selector { @include size(104, 104); }
*/
@mixin size($height, $width) {
	height: #{$height}px;
	width:	#{$width}px;
}

/*****************/

/**
* @tags: backgroundimage
* @for: Load background image
* @mixin: @include backgroundimage();
* @usage:
* .selector { @include backgroundimage(bckg-btn-dwlmenu, png); }
*/

//$module: false !default;


@mixin backgroundimage($name, $ext, $pos:top left, $repeat: no-repeat, $bgcolor:transparent, $important:null) {	
	@if $core == true {
		background: url('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}') $pos $repeat $bgcolor $important;
	}@elseif $core == module {
		background: url('get-asset-images?a=#{$name}.#{$ext}') $pos $repeat $bgcolor $important;
	}@else {
		background: image-url('#{$name}.#{$ext}') $pos $repeat $bgcolor $important;
	}
}


/*****************/

/**
* @tags: image height
* @for: Grab the height of the image in your CSS
* @library: Compass Image Helper || http://compass-style.org/reference/compass/helpers/urls/
* @mixin: @include image-height();
* @usage:
* .selector { @include image-height(img-name, png); }
*/

@mixin image-height($name, $ext) {
	@if $core == true {
		height: image-height('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}');
	}@else {
		height: image-height('#{$name}.#{$ext}');
	}
}

/*****************/

/**
* @tags: image width
* @for: Grab the width of the image in your CSS
* @library: Compass Image Helper || http://compass-style.org/reference/compass/helpers/urls/
* @mixin: @include image-width();
* @usage:
* .selector { @include image-width(img-name, png); }
*/

@mixin image-width($name, $ext) {
	@if $core == true {
		width: 	image-width('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}');
	}@else {
		width: 	image-width('#{$name}.#{$ext}');
	}
}

/*****************/

/**
* @tags: image size
* @for: Grab the height/width of the image in your CSS
* @library: Compass Image Helper || http://compass-style.org/reference/compass/helpers/urls/
* @mixin: @include image-size();
* @usage:
* .selector { @include image-size(img-name, png); }
*/

@mixin image-size($name, $ext) {
	@if $core == true {
		height: image-height('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}');
		width: 	image-width('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}');
	}@else {
		height: image-height('#{$name}.#{$ext}');
		width: 	image-width('#{$name}.#{$ext}');
	}
}

/*****************/

/**
* @tags: center element horizontally in absolute position
* @for: Grab the height/width of the image and add a value to the margin-left (half of the width)
* @library: Compass Image Helper || http://compass-style.org/reference/compass/helpers/urls/
* @mixin: @include center-absolute();
* @usage:
* .selector { @include center-absolute(img-name, png); }
*/

$div: false !default;

@mixin center-absolute($name: null, $ext: null, $repeat: no-repeat, $bgcolor:transparent, $important: null, $width: null, $height:auto, $top: null, $pos:absolute) {
	@if $div == false {
		position:	$pos;
		left:		50%;

		margin-left: - image-width('#{$name}.#{$ext}') / 2;
		height: image-height('#{$name}.#{$ext}');
		width: 	image-width('#{$name}.#{$ext}');

		@if $core == true {
			background: url('../../../../charcoal/modules/admin/assets/images/#{$name}.#{$ext}') $repeat $bgcolor $important;
		}@elseif $core == module {
			background: url('get-asset-images?a=#{$name}.#{$ext}') $repeat $bgcolor $important;
		}@else {
			background: image-url('#{$name}.#{$ext}') $repeat $bgcolor $important;
		}
	}@else {
		position:	$pos;
		top:		$top;
		left:		50%;

		width:	$width;
		height:	$height;

		margin-left:	- $width/2;
		
		z-index:	9999;
	}
}

@mixin center-absolute-div($width, $height, $top: 0) {
	position:	absolute;
	top:		$top;
	left:		50%;
	
	width:	#{$width}px;
	height:	#{$height}px;
	
	margin-left:	- $width/2;
} 


/*****************/

/**
* @tags: prefix
* @for: add prefix to your attribut
* @mixin: @include prefixer();
* @usage:
* .selector { @include prefixer(attribut, value, webkit ms moz o spec); } || @include prefixer(background-size, 100%, webkit ms moz o spec);
*/


@mixin prefixer ($property, $value, $prefixes: webkit ms moz o spec) {

  @each $prefix in $prefixes {

    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    }
    @else if $prefix == moz {
      -moz-#{$property}: $value;
    }
    @else if $prefix == ms {
      -ms-#{$property}: $value;
    }
    @else if $prefix == o {
      -o-#{$property}: $value;
    }
    @else if $prefix == spec {
      #{$property}: $value;
    }
    @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

/*****************/

/**
* @tags: prefix & suffix
* @for: add prefix to your attribut
* @mixin: @include prefix-suffix();
* @usage:
* .selector { @include prefix-suffix(attribut, value, webkit ms moz o spec); } || @include prefixer(background-size, 100%, webkit ms moz o spec);
*/

@mixin prefix-suffix ($property, $value, $prefixes: webkit ms moz o spec) {

  @each $prefix in $prefixes {

    @if $prefix == webkit {
      -webkit-#{$property}: -webkit-#{$value};
    }
    @else if $prefix == moz {
      -moz-#{$property}: -moz-#{$value};
    }
    @else if $prefix == ms {
      -ms-#{$property}: -ms-#{$value};
    }
    @else if $prefix == o {
      -o-#{$property}: -o-#{$value};
    }
    @else if $prefix == spec {
      #{$property}: #{$value};
    }
    @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

/*****************/

/**
* @tags: suffix
* @for: add suffix to your attribut
* @mixin: @include suffix();
* @usage:
* .selector { @include suffix(attribut, value, webkit ms moz o spec); } || @include suffix(background-size, 100%, webkit ms moz o spec);
*/

@mixin suffix ($property, $value, $prefixes: webkit ms moz o spec) {

  @each $prefix in $prefixes {

    @if $prefix == webkit {
      #{$property}: -webkit-#{$value};
    }
    @else if $prefix == moz {
      #{$property}: -moz-#{$value};
    }
    @else if $prefix == ms {
      #{$property}: -ms-#{$value};
    }
    @else if $prefix == o {
      #{$property}: -o-#{$value};
    }
    @else if $prefix == spec {
      #{$property}: #{$value};
    }
    @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

/*****************/

/**
* @tags: keyframes
* @for: add suffix to your keyframes animation
* @mixin: @include keyframe(animationName, webkit moz o ms spec);
* @usage:
* .selector { @include keyframes(block1-visible, webkit ms moz o spec) {
*		from, 0% {  }
*		to { }
*	}
*/

@mixin keyframes ($property, $prefixes: webkit ms moz o spec) {

  @each $prefix in $prefixes {

    @if $prefix == webkit {
      @-webkit-keyframes #{$property} { @content; }
    }
    @else if $prefix == moz {
      @-moz-keyframes #{$property} { @content; }
    }
    @else if $prefix == ms {
      @-ms-keyframes #{$property} { @content; }
    }
    @else if $prefix == o {
      @-o-keyframes #{$property} { @content; }
    }
    @else if $prefix == spec {
      @keyframes #{$property} { @content; }
    }
    @else {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@-webkit-keyframes opacityValue {
}

/*****************/

/**
* @tags: debug
* @for: add red border to element
* @mixin: @include debug();
* @usage:
* .selector { @include debug(); }
*/

//Help for debugging
%debug {
	border:		1px red dotted;
	background:	yellow;
}

/*****************/

/**
* @tags: css3 border radius
* @mixin: @include rounded();
* @usage:
* .selector { @include rounded(10px); }
*/

@mixin rounded($value) {
  border-radius: $value;
  -moz-border-radius: $value;
  -webkit-border-radius: $value;
}

/*****************/

/**
* @tags: css3 basic transition
* @mixin: @include transition();
* @usage:
* .selector { @include transition(0.3s); }
*/

/*@mixin transition ($value, $attribut: all, $easing: ease) {
	-webkit-transition: $attribut $value $easing;
	-moz-transition: 	$attribut $value $easing;
	-moz-transition:	$attribut $value $easing;
	-ms-transition:		$attribut $value $easing;
	-o-transition:		$attribut $value $easing;
	transition:			$attribut $value $easing;
}*/

/*****************/

/**
* @tags: css3 basic animation
* @mixin: @include animation();
* @usage:
* .selector { @include animation(0.3s); }
*/

@mixin animation ($value) {
	-webkit-animation-duration: $value;
	-moz-animation-duration: 	$value;
	-ms-animation-duration: 	$value;
	-o-animation-duration: 		$value;
	animation-duration: 		$value;
}

/*****************/

/**
* @tags: css3 custom transition
* @mixin: @include animation();
* @usage:
* .selector { @include custom-transition(0.3s); }
*/

@mixin custom-transition {
	-webkit-transition: all 800ms cubic-bezier(1.000, 0, 0.170, 0.995); /* older webkit */
	-webkit-transition: all 800ms cubic-bezier(1.000, -0.005, 0.170, 0.995);
	   -moz-transition: all 800ms cubic-bezier(1.000, -0.005, 0.170, 0.995);
	    -ms-transition: all 800ms cubic-bezier(1.000, -0.005, 0.170, 0.995);
	     -o-transition: all 800ms cubic-bezier(1.000, -0.005, 0.170, 0.995);
	        transition: all 800ms cubic-bezier(1.000, -0.005, 0.170, 0.995); /* custom */

	-webkit-transition-timing-function: cubic-bezier(1.000, 0, 0.170, 0.995); /* older webkit */
	-webkit-transition-timing-function: cubic-bezier(1.000, -0.005, 0.170, 0.995);
	   -moz-transition-timing-function: cubic-bezier(1.000, -0.005, 0.170, 0.995);
	    -ms-transition-timing-function: cubic-bezier(1.000, -0.005, 0.170, 0.995);
	     -o-transition-timing-function: cubic-bezier(1.000, -0.005, 0.170, 0.995);
	        transition-timing-function: cubic-bezier(1.000, -0.005, 0.170, 0.995); /* custom */
}

@mixin easeOutQuad ($value) {
	-webkit-transition: all $value cubic-bezier(0.165, 0.840, 0.440, 1.000);
	   -moz-transition: all $value cubic-bezier(0.165, 0.840, 0.440, 1.000);
	    -ms-transition: all $value cubic-bezier(0.165, 0.840, 0.440, 1.000);
	     -o-transition: all $value cubic-bezier(0.165, 0.840, 0.440, 1.000);
	        transition: all $value cubic-bezier(0.165, 0.840, 0.440, 1.000); /* easeOutQuart */

	-webkit-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
	   -moz-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
	    -ms-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
	     -o-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
	        transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000); /* easeOutQuart */
}

/*****************/

/**
* @tags: css3 transition delay
* @mixin: @include delay();
* @usage:
* .selector { @include delay(0.3s); }
*/

@mixin delay ($value) {
	transition-delay: $value;
	-moz-transition-delay: $value; /* Firefox 4 */
	-webkit-transition-delay: $value; /* Safari and Chrome */
	-o-transition-delay: $value; /* Opera */
}

@mixin animation_delay ($value) {
	animation-delay: $value;
	-moz-animation-delay: $value; /* Firefox 4 */
	-webkit-animation-delay: $value; /* Safari and Chrome */
	-o-animation-delay: $value; /* Opera */
}

/*****************/

/**
* @tags: include padding into the width & height of your element
* @mixin: @include borderbox();
* @usage:
* .selector { @include borderbox(); }
*/

@mixin borderbox {
	box-sizing: 		border-box;
	-webkit-box-sizing:	border-box;
	-moz-box-sizing: 	border-box;
}

/*****************/

/**
* @tags: background opacity
* @mixin: @include background-opacity();
* @usage:
* .selector { @include background-opacity(#fff); } || .selector { @include background-opacity(#fff, 0.8); }
*/

@mixin background-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}


/*****************/

/*  =========
  FONT FACE
=========
*/

/**
* @tags: grab every font-face file
* @mixin: @include font-face();
* @usage:
* .selector { @include font-face(font-custom-name, '../dir/font-file-name'); } | @include font-face(avenir, '../fonts/avenir-next-lt-pro');
*/

$font-url: false !default;

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal ) {
	@if $font-url == true {
		@font-face {
			font-family: $font-family;
			font-weight: $weight;
			font-style: $style;

			src: font-url('#{$file-path}.eot#iefix');

			src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
			font-url('#{$file-path}.woff') format('woff'),
			font-url('#{$file-path}.ttf') format('truetype'),
			font-url('#{$file-path}.svg##{$font-family}') format('svg');
		}
	}@elseif $font-url == false {
		@font-face {
			font-family: $font-family;
			font-weight: $weight;
			font-style: $style;

			src: url('#{$file-path}.eot#iefix');

			src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
			url('#{$file-path}.woff') format('woff'),
			url('#{$file-path}.ttf') format('truetype'),
			url('#{$file-path}.svg##{$font-family}') format('svg');
		}
	}
}

/*  =========
  TRIANGLE
=========
*/

@mixin triangle-up($value, $color) {
	width: 		0; 
	height: 	0; 
	
	border-left: 	$value solid transparent;
	border-right: 	$value solid transparent;
	border-bottom: 	$value solid $color;
}

@mixin triangle-right($value, $color) {
	width: 		0; 
	height: 	0; 
	
	border-left: 	$value solid transparent;
	border-top: 	$value solid transparent;
	border-bottom: 	$value solid $color;
}

@mixin triangle-down($value, $color) {
	width: 		0; 
	height: 	0; 
	
	border-left: 	$value solid transparent;
	border-right: 	$value solid transparent;
	border-top: 	$value solid $color;
}

@mixin triangle-left($value, $color) {
	width: 		0; 
	height: 	0; 
	
	border-top: 	$value solid transparent;
	border-right: 	$value solid transparent;
	border-bottom: 	$value solid $color;
}

/**
* @tags: ie js breakpoint fix
* @format:
* .selector(@mixin ie-grid(width:60%;));
*/

@mixin ie-grid {
	.is960 &,
	.is1024 &,
	.is1140 & {
		@content;
	}
}

/*****************/


/**
* @tags: css3 circle
* @extend: pager button
* @format:
* @include circle(width value, height value, background-color);
*/

@mixin circle($circle-width, $circle-height, $color) {
	width: 		$circle-width; 
	height: 	$circle-height; 
	background:	$color;
	
	@include border-radius($circle-width/2);
}


/**
* @tags: add any properties in placeholder
* @format:
*@include placeholder-color() {your properties}
* @usage :
* @include placeholder-color($color: red);
*/

@mixin placeholder-color($color) { 	
	@each $prefix in "::-webkit-input", ":moz", "::-moz", ":-ms-input" {
	    #{$prefix}-placeholder {
	     	color: $color;	
	    }
	}
}


/**
* @tags: add any properties in placeholder
* @format:
*@include placeholder-content() {your properties}
* @usage :
* @include placeholder-content() {
*    color: yellow;
* }*
*/

@mixin placeholder-content() {
 	
	@each $prefix in "::-webkit-input", ":moz", "::-moz", ":-ms-input" {
	    #{$prefix}-placeholder {

	     	@content;
	    }
	}
}